{"version":3,"sources":["NotesForm.js","Note.js","Notes.js","App.js","serviceWorker.js","index.js"],"names":["NotesForm","state","clicked","title","body","error","toggleForm","setState","handleChange","e","target","name","value","handleSubmit","preventDefault","length","props","addNote","id","uuidv4","className","onClick","this","onSubmit","type","placeholder","onChange","cols","rows","Component","Note","toggleEditing","isEditing","handleUpdate","updateNote","onDoubleClick","removeNote","Notes","newNote","notes","index","findIndex","note","slice","filter","localStorage","getItem","JSON","parse","nextProps","nextState","setItem","stringify","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1fb50781.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport \"./NotesForm.css\";\r\n\r\nexport default class NotesForm extends Component {\r\n  state = {\r\n    clicked: false,\r\n    title: \"\",\r\n    body: \"\",\r\n    error: \"\",\r\n  };\r\n  toggleForm = () => {\r\n    this.setState({ clicked: !this.state.clicked });\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.title.length > 0 && this.state.body.length > 0) {\r\n      this.props.addNote({\r\n        ...this.state,\r\n        id: uuidv4(),\r\n      });\r\n\r\n      this.setState({ title: \"\", body: \"\", error: \"\" });\r\n    } else {\r\n      const error = (\r\n        <div className=\"error\">Please enter a Title and a body</div>\r\n      );\r\n      this.setState({ error });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h2>\r\n          Online<span>Notes</span>\r\n        </h2>\r\n        <div>Take notes on the fly</div>\r\n        <button className=\"toggle-button\" onClick={this.toggleForm}>\r\n          New note\r\n        </button>\r\n\r\n        {this.state.clicked ? (\r\n          <div>\r\n            <form className=\"form\" onSubmit={this.handleSubmit}>\r\n              <input\r\n                name=\"title\"\r\n                value={this.state.title}\r\n                type=\"text\"\r\n                placeholder=\"Title\"\r\n                onChange={this.handleChange}\r\n              />\r\n              <textarea\r\n                cols=\"50\"\r\n                rows=\"5\"\r\n                value={this.state.body}\r\n                name=\"body\"\r\n                onChange={this.handleChange}\r\n              />\r\n              <button className=\"submit-button\">Add</button>\r\n            </form>\r\n            <div>{this.state.error}</div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./Note.css\";\r\n\r\nexport default class Note extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isEditing: false,\r\n      title: this.props.title,\r\n      body: this.props.body,\r\n    };\r\n  }\r\n\r\n  toggleEditing = () => {\r\n    this.setState({ isEditing: !this.state.isEditing });\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleUpdate = (e) => {\r\n    e.preventDefault();\r\n    const { title, body } = this.state;\r\n    this.props.updateNote(this.props.id, title, body);\r\n    this.toggleEditing();\r\n  };\r\n\r\n  render() {\r\n    let display;\r\n    if (this.state.isEditing) {\r\n      display = (\r\n        <div>\r\n          <form\r\n            className=\"form\"\r\n            onSubmit={this.handleUpdate}\r\n            onDoubleClick={this.toggleEditing}\r\n          >\r\n            <input\r\n              name=\"title\"\r\n              value={this.state.title}\r\n              type=\"text\"\r\n              placeholder=\"Title\"\r\n              onChange={this.handleChange}\r\n            />\r\n            <textarea\r\n              cols=\"50\"\r\n              rows=\"5\"\r\n              value={this.state.body}\r\n              name=\"body\"\r\n              onChange={this.handleChange}\r\n            />\r\n            <button className=\"submit-button\">Update</button>\r\n          </form>\r\n        </div>\r\n      );\r\n    } else {\r\n      display = (\r\n        <div className=\"note\" onDoubleClick={this.toggleEditing}>\r\n          <div className=\"note-title\">{this.props.title}</div>\r\n          <div className=\"note-body\">{this.props.body}</div>\r\n          <div>\r\n            <button onClick={this.props.removeNote} className=\"delete-button\">\r\n              Delete\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return display;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport NotesForm from \"./NotesForm\";\r\nimport Note from \"./Note.js\";\r\n\r\nexport default class Notes extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { notes: [] };\r\n  }\r\n\r\n  componentWillMount() {\r\n    localStorage.getItem(\"notes\") &&\r\n      this.setState({\r\n        notes: JSON.parse(localStorage.getItem(\"notes\")),\r\n      });\r\n  }\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    localStorage.setItem(\"notes\", JSON.stringify(nextState.notes));\r\n  }\r\n\r\n  addNote = (newNote) => {\r\n    this.setState((state) => ({\r\n      notes: [...state.notes, newNote],\r\n    }));\r\n  };\r\n\r\n  updateNote = (id, title, body) => {\r\n    const { notes } = this.state;\r\n    const index = notes.findIndex((note) => note.id === id);\r\n\r\n    this.setState({\r\n      notes: [\r\n        ...notes.slice(0, index),\r\n        {\r\n          ...notes[index],\r\n          title,\r\n          body,\r\n        },\r\n        ...notes.slice(index + 1),\r\n      ],\r\n    });\r\n  };\r\n\r\n  removeNote = (id) => {\r\n    this.setState({\r\n      notes: this.state.notes.filter((note) => note.id !== id),\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const notes = this.state.notes.map((note) => {\r\n      return (\r\n        <Note\r\n          key={note.id}\r\n          id={note.id}\r\n          title={note.title}\r\n          body={note.body}\r\n          updateNote={this.updateNote}\r\n          removeNote={() => this.removeNote(note.id)}\r\n        />\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        <NotesForm addNote={this.addNote} />\r\n        {notes}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport Notes from \"./Notes\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Notes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}